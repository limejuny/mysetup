" General {{{
" Use indentation for folds
" set foldmethod=indent
set foldmethod=marker
set foldnestmax=5
" set foldlevelstart=99
set foldcolumn=0

augroup vimrcFold
	" fold vimrc itself by categories
	autocmd!
	autocmd FileType vim set foldmethod=marker
	autocmd FileType vim set foldlevel=0
augroup END

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
if ! exists("mapleader")
  let mapleader = ","
endif

if ! exists("g:mapleader")
  let g:mapleader = ","
endif

" Leader key timeout
set tm=2000

" Allow the normal use of "," by pressing it twice
noremap ,, ,

" Use par for prettier line formatting
set formatprg="PARINIT='rTbgqR B=.,?_A_a Q=_s>|' par\ -w72"

" Kill the damned Ex mode.
nnoremap Q <nop>

" Python
let g:python_host_prog="/usr/bin/python"
let g:python3_host_prog="/usr/bin/python3"

" YouCompleteMe
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_key_list_select_completion = ['', '']
let g:ycm_key_list_previous_completion = ['', '']
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_warning_symbol = '>*'
let g:ycm_collect_identifiers_from_tags_files = 1

" Custom settings
filetype plugin indent on
autocmd FileType ruby,eruby compiler ruby
" autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby set completefunc=LanguageClient#complete
cnoreabbrev vt vert term

" }}}

" vim-plug {{{

set nocompatible

call plug#begin('~/.vim/bundle')

" Support bundles
Plug 'jgdavey/tslime.vim'
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'ervandew/supertab'
Plug 'benekastah/neomake'
Plug 'moll/vim-bbye'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'vim-scripts/gitignore'
Plug 'vim-erlang/vim-erlang-omnicomplete'

" Git
Plug 'tpope/vim-fugitive'
Plug 'int3/vim-extradite'
Plug 'jreybert/vimagit'

" Bars, panels, and files
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'jeetsukumaran/vim-markology'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Text manipulation
Plug 'vim-scripts/Align'
Plug 'simnalamburt/vim-mundo'
Plug 'tpope/vim-commentary'
Plug 'godlygeek/tabular'
Plug 'michaeljsmith/vim-indent-object'
Plug 'easymotion/vim-easymotion'
Plug 'ConradIrwin/vim-bracketed-paste'

" Colorscheme
Plug 'vim-scripts/wombat256.vim'

" Autocomplete
Plug 'ycm-core/YouCompleteMe'
" cnoreabbrev gt YcmComplete GoTo
nmap <leader>gt :YcmComplete GoTo<CR>
Plug 'vim-scripts/OmniCppComplete', { 'for': 'cpp' }
Plug 'vim-ruby/vim-ruby', { 'for': [ 'ruby', 'eruby' ] }
Plug 'ruby-formatter/rufo-vim', { 'for': [ 'ruby', 'eruby' ] }
Plug 'autozimu/LanguageClient-neovim', {
      \ 'branch': 'next',
      \ 'do': 'bash install.sh',
      \ }
Plug 'Shougo/neocomplete.vim'
Plug 'osyo-manga/vim-monster'

" Golang
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Python
Plug 'mindriot101/vim-yapf', { 'for': 'python' }
Plug 'nvie/vim-flake8'

" Scheme
Plug 'guns/vim-sexp'
Plug 'tpope/vim-sexp-mappings-for-regular-people'
Plug 'Olical/vim-scheme', { 'for': 'scheme', 'on': 'SchemeConnect' }

" Scala
Plug 'derekwyatt/vim-scala'
" Plug 'neoclide/coc.nvim', { 'for': 'scala', 'branch': 'release' }

" Custom bundles
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
Plug 'mhinz/vim-startify'
Plug 'ludovicchabant/vim-gutentags', { 'for': ['vimwiki', 'markdown'] }
Plug 'jszakmeister/markdown2ctags', {'do' : 'cp ./markdown2ctags.py ~/.local/bin/markdown2ctags.py'}
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-endwise'

call plug#end()
" }}}

" VIM user interface {{{

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Turn on the WiLd menu
set wildmenu
" Tab-complete files up to longest unambiguous prefix
set wildmode=list:longest,full

" Always show current position
set ruler
set number
set title

" Show trailing whitespace
set list
" But only interesting whitespace
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

" Height of the command bar
set cmdheight=1

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
" set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set vb t_vb=

if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

" Force redraw
" map <silent> <leader>r :redraw!<CR>

" View registers
nmap <leader>rr :reg<CR>

" Turn mouse mode on
nnoremap <leader>ma :set mouse=a<cr>

" Turn mouse mode off
nnoremap <leader>mo :set mouse=<cr>

" Tagbar Toggle
nnoremap <leader>t :TagbarToggle<cr>

" Default to mouse mode on
set mouse=a

" Cursor in terminal
" 1 or 0 -> blinking block
" 2 solid block
" 3 -> blinking underscore
" 4 solid underscore
" Recent versions of xterm (282 or above) also support
" 5 -> blinking vertical bar
" 6 -> solid vertical bar

if &term =~ '^xterm' || &term =~ '^screen-256color'
  " normal mode
  let &t_EI .= "\<Esc>[2 q"
  " insert mode
  let &t_SI .= "\<Esc>[5 q"
endif

" Startify Shortcut
nnoremap <leader>ss :Startify<cr>

" Moving cursor in insert mode
imap <C-h> <Esc>hi
imap <C-j> <Esc>jli
imap <C-k> <Esc>kli
imap <C-l> <Esc>lli

" }}}

" Colors and Fonts {{{

try
  colorscheme wombat256mod
catch
endtry

" Adjust signscolumn to match wombat
hi! link SignColumn LineNr

" Use pleasant but very visible search hilighting
hi Search ctermfg=white ctermbg=173 cterm=none guifg=#ffffff guibg=#e5786d gui=none
hi! link Visual Search

" Match wombat colors in nerd tree
hi Directory guifg=#8ac6f2

" Searing red very visible cursor
hi Cursor guibg=red

" Use same color behind concealed unicode characters
hi clear Conceal

" Don't blink normal mode cursor
set guicursor=n-v-c:block-Cursor
set guicursor+=n-v-c:blinkon0

" Set extra options when running in GUI mode
if has("gui_running")
  set guioptions-=T
  set guioptions-=e
  set guitablabel=%M\ %t
endif
set t_Co=256

" Set utf8 as standard encoding and en_US as the standard language
if !has('nvim')
  " Only set this for vim, since neovim is utf8 as default and setting it
  " causes problems when reloading the .vimrc configuration
  set encoding=utf8
endif

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Use large font by default in MacVim
set gfn=Monaco:h19

" Use powerline fonts for airline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_powerline_fonts = 1
let g:airline_symbols.space = "\ua0"

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_nr_format = '%s:'
" }}}

" Files, backups and undo {{{

" Turn backup off, since most stuff is in Git anyway...
set nobackup
set nowb
set noswapfile

" Open file prompt with current path
nmap <leader>e :e <C-R>=expand("%:p:h") . '/'<CR>

" Show undo tree
nmap <silent> <leader>u :MundoToggle<CR>

" Fuzzy find files
" nnoremap <silent> <Leader><space> :CtrlP<CR>
" nnoremap <silent> <Leader><space> :Files<CR>
nnoremap <silent> <Leader><space> :FZF<CR>
" let g:ctrlp_max_files=0
" let g:ctrlp_show_hidden=1
" let g:ctrlp_custom_ignore = { 'dir': '\v[\/](.git|.cabal-sandbox|.stack-work)$' }

" }}}

" Text, tab and indent related {{{

" Use spaces instead of tabs
set expandtab

" 1 tab == 2 spaces, unless the file is already
" using tabs, in which case tabs will be inserted.
set shiftwidth=2
set softtabstop=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" }}}

" Moving around, tabs, windows and buffers {{{

" Treat long lines as break lines (useful when moving around in them)
nnoremap j gj
nnoremap k gk

noremap <c-h> <c-w>h
noremap <c-k> <c-w>k
noremap <c-j> <c-w>j
noremap <c-l> <c-w>l

" Disable highlight when <leader><cr> is pressed
" but preserve cursor coloring
nmap <silent> <leader><cr> :noh\|hi Cursor guibg=red<cr>

" Return to last edit position when opening files (You want this!)
augroup last_edit
  autocmd!
  autocmd BufReadPost *
       \ if line("'\"") > 0 && line("'\"") <= line("$") |
       \   exe "normal! g`\"" |
       \ endif
augroup END
" Remember info about open buffers on close
set viminfo^=%

" Open window splits in various places
nmap <leader>sh :leftabove  vnew<CR>
nmap <leader>sl :rightbelow vnew<CR>
nmap <leader>sk :leftabove  new<CR>
nmap <leader>sj :rightbelow new<CR>

" don't close buffers when you aren't displaying them
set hidden

" previous buffer, next buffer
nnoremap <leader>bp :bp<cr>
nnoremap <leader>bn :bn<cr>
nnoremap <leader>h :bp<cr>
nnoremap <leader>j :bp<cr>
nnoremap <leader>k :bn<cr>
nnoremap <leader>l :bn<cr>

" close every window in current tabview but the current
nnoremap <leader>bo <c-w>o

" delete buffer without closing pane
noremap <leader>bd :Bd<cr>

" fuzzy find buffers
" noremap <leader>b<space> :CtrlPBuffer<cr>
noremap <leader>b<space> :Buffers<cr>

" Neovim terminal configurations
if has('nvim')
  " Use <Esc> to escape terminal insert mode
  tnoremap <Esc> <C-\><C-n>
  " Make terminal split moving behave like normal neovim
  tnoremap <c-h> <C-\><C-n><C-w>h
  tnoremap <c-j> <C-\><C-n><C-w>j
  tnoremap <c-k> <C-\><C-n><C-w>k
  tnoremap <c-l> <C-\><C-n><C-w>l
endif

" }}}

" Status line {{{

" Always show the status line
set laststatus=2

" }}}

" Helper functions {{{

function! CmdLine(str)
  exe "menu Foo.Bar :" . a:str
  emenu Foo.Bar
  unmenu Foo
endfunction

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'gv'
    call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.' . a:extra_filter)
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

" }}}

" NERDTree {{{

" Close nerdtree after a file is selected
let NERDTreeQuitOnOpen = 1

function! IsNERDTreeOpen()
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

function! ToggleFindNerd()
  if IsNERDTreeOpen()
    exec ':NERDTreeToggle'
  else
    exec ':NERDTreeFind'
  endif
endfunction

" If nerd tree is closed, find current file, if open, close it
nmap <silent> <leader>f <ESC>:call ToggleFindNerd()<CR>
nmap <silent> <leader>F <ESC>:NERDTreeToggle<CR>

" }}}

" Alignment {{{

" Stop Align plugin from forcing its mappings on us
let g:loaded_AlignMapsPlugin=1
" Align on equal signs
map <Leader>a= :Align =<CR>
" Align on commas
map <Leader>a, :Align ,<CR>
" Align on pipes
map <Leader>a<bar> :Align <bar><CR>
" Prompt for align character
map <leader>ap :Align
" }}}

" Tags {{{

set tags=tags;/,codex.tags;/

" }}}

" Git {{{

let g:extradite_width = 60
" Hide messy Ggrep output and copen automatically
function! NonintrusiveGitGrep(term)
  execute "copen"
  " Map 't' to open selected item in new tab
  execute "nnoremap <silent> <buffer> t <C-W><CR><C-W>T"
  execute "silent! Ggrep " . a:term
  execute "redraw!"
endfunction

command! -nargs=1 GGrep call NonintrusiveGitGrep(<q-args>)
nmap <leader>gs :Gstatus<CR>
nmap <leader>gg :copen<CR>:GGrep 
nmap <leader>gl :Extradite!<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gb :Gblame<CR>

function! CommittedFiles()
  " Clear quickfix list
  let qf_list = []
  " Find files committed in HEAD
  let git_output = system("git diff-tree --no-commit-id --name-only -r HEAD\n")
  for committed_file in split(git_output, "\n")
    let qf_item = {'filename': committed_file}
    call add(qf_list, qf_item)
  endfor
  " Fill quickfix list with them
  call setqflist(qf_list)
endfunction

" Show list of last-committed files
nnoremap <silent> <leader>g? :call CommittedFiles()<CR>:copen<CR>

" }}}

" Completion {{{
set completeopt+=longest

" Use buffer words as default tab completion
let g:SuperTabDefaultCompletionType = '<c-x><c-n>'

" }}}

" LanguageClient{{{
" Tell the language client to use the default IP and port
" that Solargraph runs on
let g:LanguageClient_serverCommands = {
      \ 'ruby': ['solargraph', 'stdio'],
      \ 'scala': ['metals-vim'],
      \ }
let g:monster#completion#backend = 'solargraph'
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#omni#input_patterns = {
      \ "ruby" : '[^. *\t]\.\w*\|\h\w*::',
      \ }

" Don't send a stop signal to the server when exiting vim.
" This is optional, but I don't like having to restart Solargraph
" every time I restart vim.
" let g:LanguageClient_autoStop = 0

" Configure ruby omni-completion to use the language client:
augroup LanguageClient
  autocmd!
  autocmd FileType ruby setlocal omnifunc=LanguageClient#complete

  autocmd FileType ruby nnoremap <F5> :call LanguageClient_contextMenu()<CR>
  autocmd FileType ruby nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
  autocmd FileType ruby nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
  autocmd FileType ruby nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
augroup END

" autocmd FileType ruby let g:rufo_auto_formatting = 1

" }}}

" Vimwiki {{{
let g:vimwiki_list = [
      \ {
      \   'path': '/home/loonatic/src/eggmoid.github.io/_wiki/',
      \   'ext' : '.md',
      \   'diary_rel_path': '.',
      \ },
\]
let g:vimwiki_conceallevel = 0
let g:vimwiki_global_ext = 0

command! WikiIndex :VimwikiIndex
nmap <leader>ww <Plug>VimwikiIndex
nmap <leader>wi <Plug>VimwikiDiaryIndex
nmap <leader>w<leader>w <Plug>VimwikiMakeDiaryNote
nmap <leader>wt :VimwikiTable<CR>

nnoremap <F4> :execute "VWS /" . expand("<cword>") . "/" <Bar> :lopen<CR>
nnoremap <S-F4> :execute "VWB" <Bar> :lopen<CR>

function! LastModified()
  if &modified
    let save_cursor = getpos(".")
    let n = min([10, line("$")])
    keepjumps exe '1,' . n . 's#^\(.\{,10}updated\s*: \).*#\1' .
          \ strftime('%Y-%m-%d %H:%M:%S +0900') . '#e'
    call histdel('search', -1)
    call setpos('.', save_cursor)
  endif
endfun

function! NewTemplate()
  let l:wiki_directory = v:false

  for wiki in g:vimwiki_list
    if expand('%:p:h') . '/' == wiki.path
      let l:wiki_directory = v:true
      break
    endif
  endfor

  if !l:wiki_directory
    return
  endif

  if line("$") > 1
    return
  endif

  let l:template = []
  call add(l:template, '---')
  call add(l:template, 'layout  : wiki')
  call add(l:template, 'title   : ')
  call add(l:template, 'summary : ')
  call add(l:template, 'date    : ' . strftime('%Y-%m-%d %H:%M:%S +0900'))
  call add(l:template, 'updated : ' . strftime('%Y-%m-%d %H:%M:%S +0900'))
  call add(l:template, 'tags    : ')
  call add(l:template, 'toc     : true')
  call add(l:template, 'public  : true')
  call add(l:template, 'parent  : ')
  call add(l:template, 'latex   : false')
  call add(l:template, '---')
  call add(l:template, '* TOC')
  call add(l:template, '{:toc}')
  call add(l:template, '')
  call add(l:template, '# ')
  call setline(1, l:template)
  execute 'normal! G'
  execute 'normal! $'

  echom 'new wiki page has created'
endfunction

autocmd BufWritePre *.md call LastModified()
autocmd BufRead,BufNewFile *.md call NewTemplate()

augroup vimwikiauto
  autocmd BufWritePre *wiki/*.md call LastModified()
  autocmd BufRead,BufNewFile *wiki/*.md call NewTemplate()
augroup END

let g:tagbar_type_markdown = {
      \ 'ctagstype' : 'markdown',
      \ 'kinds' : [
        \ 'h:headings',
        \ 'l:links',
        \ 'i:images'
        \ ],
      \ 'sort' : 0
      \ }
let g:tagbar_type_vimwiki = {
      \ 'ctagstype' : 'vimwiki',
      \ 'ctagsbin' : '~/.local/bin/markdown2ctags.py',
      \ 'ctagsargs' : '-f - --sort=yes --sro=»',
      \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
        \ ],
      \ 'sro' : '»',
      \ 'kind2scope' : { 's' : 'section' },
      \ 'sort' : 0
      \ }
autocmd Filetype vimwiki let g:ycm_filetype_blacklist = {
      \ 'vimwiki': 1
      \}
autocmd FileType vimwiki imap <F2> ## 
autocmd FileType vimwiki map <F2> i## 

" default header key unmappings (~/.vim/bundle/vimwiki/ftplugin/vimwiki.vim #line:707)
autocmd FileType vimwiki nunmap <buffer> =
autocmd FileType vimwiki nunmap <buffer> -
autocmd FileType vimwiki nunmap <buffer> ]u
autocmd FileType vimwiki nunmap <buffer> [u
autocmd FileType vimwiki nunmap <buffer> ]]
autocmd FileType vimwiki nunmap <buffer> [[
autocmd FileType vimwiki nunmap <buffer> ]=
autocmd FileType vimwiki nunmap <buffer> [=

" }}}

" vim-scheme {{{
let g:scheme_split_size = -10
let g:scheme_executable = "racket"
" }}}

" vim-scala {{{
" Help Vim recognize *.sbt and *.sc as Scala files
au BufRead,BufNewFile *.sbt,*.sc set filetype=scala
" autocmd FileType scala :call coc#config("suggest.autoTrigger", "none")

" ~/.vim/after/ftplugin/scala.vim
" }}}

" Formatter {{{
autocmd FileType python nnoremap <leader>y :call Yapf('--style google')<cr>
autocmd FileType python map <buffer> <F3> :call Flake8()<cr>
let g:flake8_show_in_file=1
let g:flake8_max_markers=500
autocmd FileType json nnoremap <leader>y :%!python -m json.tool<cr>
" "}}}

" WSL {{{
let s:clip = '/mnt/c/Windows/System32/clip.exe'
if executable(s:clip)
  augroup WSLYank
    autocmd!
    autocmd TextYankPost * call system('echo '.shellescape(join(v:event.regcontents, "\<CR>")).' | '.s:clip)
  augroup END
endif

let powershell = '/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe'
if executable(powershell)
  nmap <leader>cc :call system(powershell.' -NoLogo -NoProfile -Command "Set-Clipboard -Value \$null"')<CR>
endif
" }}}

" Customization {{{
set fileencodings=utf-8,euc-kr,default
set runtimepath^=~/.vim/bundle/vim-erlang-omnicomplete

let delimitMate_expand_cr=1

" let g:coc_disable_startup_warning = 1

" }}}
